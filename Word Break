class Solution {
public:
    bool wordBreak(string s, unordered_set<string>& wordDict) {

        string::iterator it = s.begin();
        
        string::iterator it_end = s.begin();
        
        while(it_end+1 != s.end()) it_end++;
        
        int size = s.size();
        
        if(size == 0) return true;
        
        if(size == 1) 
        {
            if(wordDict.end() != wordDict.find(s)) return true;
            return false;
        }
        
        int wdFound[size+1];
        
        for(int i = 0; i <= size; ++i) wdFound[i] = 0;
        
        it++;
    
        for(int i = 1; it <= s.end(); ++it, ++i)
        {
            string str(s.begin(), it);
            
            if(wdFound[i] == 0 && wordDict.end() != wordDict.find(str)) wdFound[i] = 1;
            
            if(wdFound[i])
            {
                if(it == s.end()) return true;
                
                string::iterator iter = it+1;
                int j = i + 1;
                
                for(; iter <= s.end(); ++iter, j++)
                {
                    string str(it, iter);
            
                    if(wdFound[j] == 0 && wordDict.end() != wordDict.find(str)) 
                    {
                        wdFound[j] = 1;
                    }
                    if(iter == s.end() && wdFound[j] == 1) 
                    {
                        return true;
                    }
                }
            }
        }
        
        return false;
    }
};
