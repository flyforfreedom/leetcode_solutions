int MIN(int a, int b, int c) 
{
    int temp = a;
    
    if(b < a)temp = b;
    
    if(c < temp) temp = c;
    
    return temp;
}

int maximalSquare(char** matrix, int matrixRowSize, int matrixColSize) {
    
    if(!matrix) return 0;
    
    int max_size = 0;
    
    int** p = malloc(sizeof(int*) * matrixRowSize);
    
    for(int i = 0; i < matrixRowSize; ++i)
    {
        p[i] = malloc(sizeof(int) * matrixColSize);
        
        for(int j = 0; j < matrixColSize; ++j)
        {
            p[i][j] = 0;
        }
    }
    
    for(int m = 0; m < matrixRowSize; ++m)
    {
        for(int n = 0; n < matrixColSize; ++n)
        {
            if(m == 0 || n == 0)
            {
                p[m][n] = matrix[m][n] - '0';
            }
            else
            {
                if(matrix[m][n] == '0')
                {
                    p[m][n] = 0;
                }
                else
                {
                    p[m][n] = MIN(p[m-1][n], p[m][n-1], p[m-1][n-1]) + 1;
                }
            }
            
            if(p[m][n] > max_size) max_size = p[m][n];
        }
    }
    
    for(int i = 0; i < matrixRowSize; ++i)
    {
        free(p[i]);
    }
    
    free(p);
    
    return max_size * max_size;
}
